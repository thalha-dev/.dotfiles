# ┌───────────────────────────────────────────────────────────────────────────┐
# │                        Environmental Variables                            │
# └───────────────────────────────────────────────────────────────────────────┘
# f = full path
# fs = selected files separated with the value of 'filesep', full path
# fx selected files
# :  read (default)  builtin/custom command
# $  shell           shell command
# %  shell-pipe      shell command running with the ui
# !  shell-wait      shell command waiting for key press
# &  shell-async     shell command running asynchronously

# ┌───────────────────────────────────────────────────────────────────────────┐
# │                                  OPTIONS                                  │
# └───────────────────────────────────────────────────────────────────────────┘

set shell sh                    # interpreter for shell commands
set ifs "\n"
set filesep "\n"                # default already
set incsearch o                 # jump to first match after each keystroke in searc
set incfilter o                 # apply filter after each keystroke
set smartcase                   # if capital letter then case sensitive
set scrolloff 10                # leave some space at the top and the bottom of the screen
set hidden true
set icons
set dircounts on                # show number of items in directory instead of sie
set drawbox on                  # draw a border around all panes
set ratios '1:2:2'              # ratio of pane widths
set info "size"                 # list directory information on the right
# set history on                  # save history across sessions 
set period 1                    # interval to check for directory updates


# ┌───────────────────────────────────────────────────────────────────────────┐
# │                                 COMMANDS                                  │
# └───────────────────────────────────────────────────────────────────────────┘

cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
map r push :rename<space>

cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        image/*) sxiv -b $fx &;;
        application/pdf|application/epub*) zathura $fx;;
        video/*) mpv --msg-level=all=no $fx 2> /dev/null &;;
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}


# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  touch $ans
}}

# Trash bindings
# install trash-cli before
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd restore_trash ${{
  trash-restore
}}

cmd setwallpaper ${{
    feh --bg-fill $f
}}

cmd makeExecutable ${{
    chmod +x $f
}}

# ┌───────────────────────────────────────────────────────────────────────────┐
# │                                 BINDINGS                                  │
# └───────────────────────────────────────────────────────────────────────────┘

# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d

# Movement 
map gb cd ~/Documents/Books
map gD cd ~/Documents
map gd cd ~/Downloads
map gp cd ~/Pictures
map gv cd ~/Videos
map gc cd ~/.dotfiles
map gC cd ~/.config
map gl cd ~/learn
map gs cd ~/source-installed
map gr cd / 
map gh cd ~ 

# Basic Functions
map au extract
map DDD delete
map p paste
map x cut
map y copy
map <enter> open
map R reload
map mf mkfile
map md mkdir
map bb setwallpaper
map Cx makeExecutable
map dd trash
map dr restore_trash
map ; push :
